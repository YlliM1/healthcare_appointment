@model PaginatedList<healthcare_appointment.Models.ApplicationUser>
@{
    ViewData["Title"] = "Admin Dashboard";
    var selectedSpecialization = ViewData["Specialization"]?.ToString();
}

<!-- Buttons Section (Top Left) -->
<div class="d-flex justify-content-start mb-3" style="position: absolute; top: 100px; left: 20px;">
    <button class="btn btn-group active" id="allUsersBtn" style="background-color: #bfd8bf; color: #fff; border-radius: 0; border: 1px solid #bfd8bf;padding:10px;">All Users</button>
    <button class="btn btn-group" id="doctorsBtn" style="background-color: #bfd8bf; color: #fff; border-radius: 0; border: 1px solid #bfd8bf;padding:10px;">Doctors</button>
</div>

<!-- Search Form (Top Right) -->
<div class="search-container" id="searchContainer">
    @using (Html.BeginForm("Index", "AdminDashboard", FormMethod.Get))
    {
        <div class="d-flex justify-content-end">
            <div class="me-2">
                <input type="text" name="searchText" class="form-control" placeholder="Search by email, name..." value="@ViewData["SearchText"]" />
            </div>
            <button type="submit" class="btn btn-primary">Search</button>
        </div>
    }
</div>

<div class="full-page-container">
    <!-- Main content area -->
    <div class="container">
        <!-- Users Table Section -->
        <div id="usersTableContainer">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <div class="h2-button">
                    <h2>Manage Users</h2>
                    <div class="d-flex">
                        <div class="me-2">
                            <select name="specialization" class="form-control selectForm" id="specializationSelect" onchange="filterDoctors()">
                                <option value="">Select Specialization</option>
                                <!-- Options will be dynamically populated by JavaScript -->
                            </select>
                        </div>
                    </div>
                </div>
                <a class="btn btn-success" href="@Url.Action("Create", "AdminDashboard")">+ Add User</a>
            </div>

            <table class="table table-bordered table-striped">
                <thead>
                    <tr>
                        <th>Email</th>
                        <th>First Name</th>
                        <th>Last Name</th>
                        <th>Specialization</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="usersTableBody">
                    @foreach (var user in Model)
                    {
                        <tr id="userRow-@user.Id" class="doctorRow" data-specialization="@user.ServiceSpecialization" data-isDoctor="@user.IsDoctor.ToString().ToLower()">
                            <td>@user.Email</td>
                            <td>@user.FirstName</td>
                            <td>@user.LastName</td>
                            <td>@user.ServiceSpecialization</td>
                            <td>
                                <a href="@Url.Action("Edit", "AdminDashboard", new { id = user.Id })" class="btn btn-edit">
                                    <i class="fas fa-pen pen"></i>
                                </a>
                                <button type="button" class="btn btn-delete" onclick="showDeleteModal('@user.Id', 'user')">
                                    <i class="fas fa-trash-alt"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <!-- Pagination -->
            <nav aria-label="Page navigation">
                <ul class="pagination justify-content-center">
                    <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                        <a class="page-link" href="@Url.Action("Index", "AdminDashboard", new { page = Model.CurrentPage - 1, searchText = ViewData["SearchText"], specialization = ViewData["Specialization"] })" aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>
                    @for (var i = 1; i <= Model.TotalPages; i++)
                    {
                        <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                            <a class="page-link" href="@Url.Action("Index", "AdminDashboard", new { page = i, searchText = ViewData["SearchText"], specialization = ViewData["Specialization"] })">@i</a>
                        </li>
                    }
                    <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                        <a class="page-link" href="@Url.Action("Index", "AdminDashboard", new { page = Model.CurrentPage + 1, searchText = ViewData["SearchText"], specialization = ViewData["Specialization"] })" aria-label="Next">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                </ul>
            </nav>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Delete Item</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this item?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteButton">Delete</button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="~/css/AdminDashboard.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css" />
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        let itemIdToDelete;
        let itemTypeToDelete;

        function showDeleteModal(itemId, itemType) {
            itemIdToDelete = itemId;
            itemTypeToDelete = itemType;
            var myModal = new bootstrap.Modal(document.getElementById('deleteModal'));
            myModal.show();
        }

        document.getElementById('confirmDeleteButton').addEventListener('click', function () {
            if (itemTypeToDelete === 'user') {
                deleteUser(itemIdToDelete);
            }
            var myModal = bootstrap.Modal.getInstance(document.getElementById('deleteModal'));
            myModal.hide();
        });

        function deleteUser(userId) {
            fetch(`/AdminDashboard/DeleteUser/${userId}`, {
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json' }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.getElementById(`userRow-${userId}`).remove();
                } else {
                    alert(data.error || 'Failed to delete user');
                }
            })
            .catch(error => alert('Failed to delete user'));
        }

        document.getElementById('doctorsBtn').addEventListener('click', function () {
            document.getElementById('usersTableContainer').style.display = 'block';
            document.getElementById('searchContainer').style.display = 'block'; // Show search bar
            filterDoctors();
            updateButtonState('doctorsBtn');
        });

        document.getElementById('allUsersBtn').addEventListener('click', function () {
            document.getElementById('usersTableContainer').style.display = 'block';
            document.getElementById('searchContainer').style.display = 'block'; // Show search bar
            showAllUsers();
            updateButtonState('allUsersBtn');
        });

        function filterDoctors() {
            const selectedSpecialization = document.getElementById('specializationSelect').value;
            const doctorRows = document.querySelectorAll('.doctorRow');
            doctorRows.forEach(function(row) {
                const specialization = row.getAttribute('data-specialization');
                const isDoctor = row.getAttribute('data-isDoctor') === 'true';
                if (isDoctor && (selectedSpecialization === "" || specialization === selectedSpecialization)) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }

        function showAllUsers() {
            const userRows = document.querySelectorAll('.doctorRow');
            userRows.forEach(function(row) {
                row.style.display = '';
            });
        }

        function updateButtonState(activeButtonId) {
            var buttons = document.querySelectorAll('.btn-group button');
            buttons.forEach(function(button) {
                button.classList.remove('active');
            });
            document.getElementById(activeButtonId).classList.add('active');
        }

        document.addEventListener("DOMContentLoaded", function () {
            const specializations = @Html.Raw(Json.Serialize(ViewData["Specializations"]));

            const specializationSelect = document.getElementById('specializationSelect');

            // Add specializations to the dropdown
            specializations.forEach(function (specialization) {
                const option = document.createElement('option');
                option.value = specialization;
                option.textContent = specialization;
                specializationSelect.appendChild(option);
            });
        });
    </script>
}
